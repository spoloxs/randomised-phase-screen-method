% Constants (adjust as necessary)
lambda = 5e-5; % Wavelength in meters (example value)
k = 2 * pi / lambda; % Wave number
L = 200000; % Propagation distance in meters
f = sqrt(lambda * L); % Fresnel length in meters
D = 40; % Aperture diameter in meters
l_0 = 1; % Inner scale of turbulence in meters
L_0 = 100000; % Outer scale of turbulence in meters

% Define the Airy function A(x)
A = @(x) (2 * besselj(1, x) ./ x).^2; % J1 is the first-order Bessel function of the first kind

% Phi_n function
function phi_n = Phi_n(k, l_0, L_0, Cn2)
    % Check if k is a vector and adjust calculations accordingly
    k_l = 3.3 / l_0; % Scaling constant for the inner scale
    k_0 = 2 * pi / L_0; % Scaling constant for the outer scale

    % Define the scaling function f_n(k/k_l)
    fn = @(x) 1 + 1.802 * x - 0.254 * x.^(7/6);  % Empirical function

    % Calculate the power spectral density
    phi_n = 0.033 * Cn2 * fn(k / k_l) .* exp(-k.^2 / k_l^2) ./ (k.^2 + k_0^2).^(11/6);
end

% Range of Cn^2 values for Rytov variance calculations
Cn2_values = linspace(1e-20, 1e-1, 2); % Adjust based on realistic conditions
rytov_variance_values = 1.23 * Cn2_values .* k.^(7/6) .* L.^(11/6);

% Preallocate arrays for AoA variance calculations
aoa_variance_values = zeros(size(Cn2_values));

% Numerical integration for each Cn^2 value
for i = 1:length(Cn2_values)
    Cn2 = Cn2_values(i);
    
    % Define the integrand for the AoA variance calculation
    integrand = @(kappa) kappa.^3 .* Phi_n(kappa, l_0, L_0, Cn2) .* ...
                         (1 + (2 * pi) ./ (kappa * f).^2) .* ...
                         sin((kappa * f).^2 / (2 * pi)) .* A(D * kappa / 2);
    
    % Numerical integration with a finite upper limit (replace Inf with a large number if needed)
    aoa_variance_values(i) = pi^2 * L * integral(integrand, 0, 100); % 100 as a practical upper limit
end

% Plot AoA variance vs Rytov variance
figure;
loglog(rytov_variance_values, aoa_variance_values, 'b', 'LineWidth', 1.5);
hold on; % Maintain current plot for additional data

% Parameters for the phase screen method
M = 2048; % Grid size for phase screen
delta = 0.01; % Grid spacing in meters
delta_x = delta; % Grid spacing in x-direction
delta_y = delta; % Grid spacing in y-direction
delta_z = delta; % Step size for phase screen propagation

% Preallocate arrays for phase screen AoA variance calculations
aoa_variance_phasescreen = zeros(size(Cn2_values));
aoa_variance_phasescreen2 = zeros(size(Cn2_values));

% Number of phase screens
num_screens = 2;
screen_distance = L / num_screens; % Distance between phase screens

% Calculate AoA variance using the phase screen method
for i = 1:length(Cn2_values)
    Cn2 = Cn2_values(i);
    
    % Initialize phase distortion arrays
    phase_screen_total = zeros(M, M);
    phase_screen_total2 = zeros(M, M);
    
    % Apply phase screens over the propagation distance
    for j = 1:num_screens
        phase_screen_segment = real(phasescreen(M, delta, L0, l0, lambda, Cn2, delta_z)); 
        phase_screen_segment2 = real(phasescreen2(M, delta, L0, l0, lambda, Cn2, delta_x, delta_y, delta_z)); 
        
        phase_screen_total = phase_screen_total + phase_screen_segment;
        phase_screen_total2 = phase_screen_total2 + phase_screen_segment2;
    end
    
    % Define subregion for variance calculation
    row_range = round(M/2 - D/(2*delta)) : round(M/2 + D/(2*delta));
    col_range = round(M/2 - D/(2*delta)) : round(M/2 + D/(2*delta));
    
    % Calculate AoA variance for the phase screen method
    aoa_variance_phasescreen(i) = pi^2 * L * mean(phase_screen_total(row_range, col_range).^2, 'all');
    aoa_variance_phasescreen2(i) = pi^2 * L * mean(phase_screen_total2(row_range, col_range).^2, 'all');
end

% Plot results of the phase screen method
loglog(rytov_variance_values, aoa_variance_phasescreen, 'r', 'LineWidth', 1.5);
loglog(rytov_variance_values, aoa_variance_phasescreen2, 'g', 'LineWidth', 1.5);

% Final plot adjustments
xlabel('Rytov Variance \sigma_R^2');
ylabel('AoA Variance');
title('AoA Variance vs Rytov Variance');
legend('Rytov Method', 'Phase Screen Method', 'Phase Screen Method 2');
grid on;
hold off;
