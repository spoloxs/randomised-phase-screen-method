function phz = phasescreen(M, delta, L0, l0, wavelength, Cn)
    % Set up the frequency grid
    del_k = 2 * pi / (M * delta);            % Frequency grid spacing [1/m]
    kx = (-M/2 : M/2-1) * del_k;             % Frequency grid [1/m]
    [kx, ky] = meshgrid(kx, kx);             % Create a 2D frequency grid

    % Calculate the phase screen in the frequency domain
    delta_z = 1;  % Placeholder, adjust if needed
    % Compute C_tilde using nested for loops
    C_tilde = zeros(M, M);

    for i = 1:M
        for j = 1:M
            % Calculate the value for each (i, j) element
            C_tilde(i, j) = (randn + 1i * rand) * ...
                sqrt(2 * pi * delta_z * del_k^2 * computePhi_n(kx(i, j), ky(i, j), l0, L0, Cn)) * ...
                (2 * pi / wavelength);
        end
    end

    % Compute the inverse FFT to get the phase screen in the spatial domain
    C = M^2 * ifft2(C_tilde);
    
    % Return the phase screen (optional: theta_R or C can be returned)
    phz = C;
    
end